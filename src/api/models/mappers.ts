/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */


export const DataTaskGroup = {
  required: false,
  serializedName: 'DataTaskGroup',
  type: {
    name: 'Composite',
    className: 'DataTaskGroup',
    modelProperties: {
      dataTaskGroupId: {
        required: false,
        serializedName: 'dataTaskGroupId',
        type: {
          name: 'Number'
        }
      },
      dataTaskList: {
        required: false,
        serializedName: 'dataTaskList',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'DataTaskElementType',
              type: {
                name: 'Composite',
                className: 'DataTask'
              }
          }
        }
      },
      groupOnly: {
        required: false,
        serializedName: 'groupOnly',
        type: {
          name: 'Boolean'
        }
      },
      name: {
        required: false,
        serializedName: 'name',
        type: {
          name: 'String'
        }
      },
      cronSchedule: {
        required: false,
        serializedName: 'cronSchedule',
        type: {
          name: 'String'
        }
      },
      enabled: {
        required: false,
        serializedName: 'enabled',
        type: {
          name: 'Boolean'
        }
      },
      lastDuration: {
        required: false,
        serializedName: 'lastDuration',
        type: {
          name: 'String'
        }
      },
      lastStartTime: {
        required: false,
        serializedName: 'lastStartTime',
        type: {
          name: 'DateTime'
        }
      },
      maxRetries: {
        required: false,
        serializedName: 'maxRetries',
        type: {
          name: 'Number'
        }
      },
      nextStartTime: {
        required: false,
        serializedName: 'nextStartTime',
        type: {
          name: 'DateTime'
        }
      },
      retries: {
        required: false,
        serializedName: 'retries',
        type: {
          name: 'Number'
        }
      },
      recCreated: {
        required: false,
        serializedName: 'recCreated',
        type: {
          name: 'DateTime'
        }
      },
      recModified: {
        required: false,
        serializedName: 'recModified',
        type: {
          name: 'DateTime'
        }
      },
      entityName: {
        required: false,
        readOnly: true,
        serializedName: 'entityName',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const DataTask = {
  required: false,
  serializedName: 'DataTask',
  type: {
    name: 'Composite',
    className: 'DataTask',
    modelProperties: {
      dataTaskGroup: {
        required: false,
        serializedName: 'dataTaskGroup',
        type: {
          name: 'Composite',
          className: 'DataTaskGroup'
        }
      },
      dataTaskGroupId: {
        required: false,
        serializedName: 'dataTaskGroupId',
        type: {
          name: 'Number'
        }
      },
      dataTaskId: {
        required: false,
        serializedName: 'dataTaskId',
        type: {
          name: 'Number'
        }
      },
      displayName: {
        required: false,
        serializedName: 'displayName',
        type: {
          name: 'String'
        }
      },
      executionOrder: {
        required: false,
        serializedName: 'executionOrder',
        type: {
          name: 'Number'
        }
      },
      handlerSettings: {
        required: false,
        serializedName: 'handlerSettings',
        type: {
          name: 'String'
        }
      },
      inactive: {
        required: false,
        serializedName: 'inactive',
        type: {
          name: 'Boolean'
        }
      },
      isMaintenance: {
        required: false,
        serializedName: 'isMaintenance',
        type: {
          name: 'Boolean'
        }
      },
      status: {
        required: false,
        serializedName: 'status',
        type: {
          name: 'String'
        }
      },
      taskType: {
        required: false,
        serializedName: 'taskType',
        type: {
          name: 'String'
        }
      },
      cronSchedule: {
        required: false,
        serializedName: 'cronSchedule',
        type: {
          name: 'String'
        }
      },
      enabled: {
        required: false,
        serializedName: 'enabled',
        type: {
          name: 'Boolean'
        }
      },
      lastStartTime: {
        required: false,
        serializedName: 'lastStartTime',
        type: {
          name: 'DateTime'
        }
      },
      maxRetries: {
        required: false,
        serializedName: 'maxRetries',
        type: {
          name: 'Number'
        }
      },
      nextStartTime: {
        required: false,
        serializedName: 'nextStartTime',
        type: {
          name: 'DateTime'
        }
      },
      retries: {
        required: false,
        serializedName: 'retries',
        type: {
          name: 'Number'
        }
      },
      lastDuration: {
        required: false,
        serializedName: 'lastDuration',
        type: {
          name: 'String'
        }
      },
      recCreated: {
        required: false,
        serializedName: 'recCreated',
        type: {
          name: 'DateTime'
        }
      },
      recModified: {
        required: false,
        serializedName: 'recModified',
        type: {
          name: 'DateTime'
        }
      },
      entityName: {
        required: false,
        readOnly: true,
        serializedName: 'entityName',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const ContainFilterDataTask = {
  required: false,
  serializedName: 'ContainFilter[DataTask]',
  type: {
    name: 'Composite',
    className: 'ContainFilterDataTask',
    modelProperties: {
      values: {
        required: false,
        serializedName: 'values',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'stringElementType',
              type: {
                name: 'String'
              }
          }
        }
      }
    }
  }
};

export const ExistsFilterDataTask = {
  required: false,
  serializedName: 'ExistsFilter[DataTask]',
  type: {
    name: 'Composite',
    className: 'ExistsFilterDataTask',
    modelProperties: {
      values: {
        required: false,
        serializedName: 'values',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'stringElementType',
              type: {
                name: 'String'
              }
          }
        }
      }
    }
  }
};

export const IgnoredFilterDataTask = {
  required: false,
  serializedName: 'IgnoredFilter[DataTask]',
  type: {
    name: 'Composite',
    className: 'IgnoredFilterDataTask',
    modelProperties: {
      values: {
        required: false,
        serializedName: 'values',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'stringElementType',
              type: {
                name: 'String'
              }
          }
        }
      }
    }
  }
};

export const PeriodFilterDataTask = {
  required: false,
  serializedName: 'PeriodFilter[DataTask]',
  type: {
    name: 'Composite',
    className: 'PeriodFilterDataTask',
    modelProperties: {
      from: {
        required: false,
        serializedName: 'from',
        type: {
          name: 'DateTime'
        }
      },
      to: {
        required: false,
        serializedName: 'to',
        type: {
          name: 'DateTime'
        }
      }
    }
  }
};

export const FieldFilterDataTask = {
  required: false,
  serializedName: 'FieldFilter[DataTask]',
  type: {
    name: 'Composite',
    className: 'FieldFilterDataTask',
    modelProperties: {
      containValues: {
        required: false,
        serializedName: 'containValues',
        type: {
          name: 'Composite',
          className: 'ContainFilterDataTask'
        }
      },
      existsValues: {
        required: false,
        serializedName: 'existsValues',
        type: {
          name: 'Composite',
          className: 'ExistsFilterDataTask'
        }
      },
      fieldName: {
        required: false,
        serializedName: 'fieldName',
        type: {
          name: 'String'
        }
      },
      ignoredValues: {
        required: false,
        serializedName: 'ignoredValues',
        type: {
          name: 'Composite',
          className: 'IgnoredFilterDataTask'
        }
      },
      period: {
        required: false,
        serializedName: 'period',
        type: {
          name: 'Composite',
          className: 'PeriodFilterDataTask'
        }
      }
    }
  }
};

export const PagedListRequestDataTask = {
  required: false,
  serializedName: 'PagedListRequest[DataTask]',
  type: {
    name: 'Composite',
    className: 'PagedListRequestDataTask',
    modelProperties: {
      currentPage: {
        required: false,
        serializedName: 'currentPage',
        type: {
          name: 'Number'
        }
      },
      filters: {
        required: false,
        serializedName: 'filters',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'FieldFilterDataTaskElementType',
              type: {
                name: 'Composite',
                className: 'FieldFilterDataTask'
              }
          }
        }
      },
      perPage: {
        required: false,
        serializedName: 'perPage',
        type: {
          name: 'Number'
        }
      },
      sortBy: {
        required: false,
        serializedName: 'sortBy',
        type: {
          name: 'String'
        }
      },
      sortDesc: {
        required: false,
        serializedName: 'sortDesc',
        type: {
          name: 'Boolean'
        }
      }
    }
  }
};

export const IPagedList = {
  required: false,
  serializedName: 'IPagedList',
  type: {
    name: 'Composite',
    className: 'IPagedList',
    modelProperties: {
      pageCount: {
        required: false,
        readOnly: true,
        serializedName: 'pageCount',
        type: {
          name: 'Number'
        }
      },
      totalItemCount: {
        required: false,
        readOnly: true,
        serializedName: 'totalItemCount',
        type: {
          name: 'Number'
        }
      },
      pageNumber: {
        required: false,
        readOnly: true,
        serializedName: 'pageNumber',
        type: {
          name: 'Number'
        }
      },
      pageSize: {
        required: false,
        readOnly: true,
        serializedName: 'pageSize',
        type: {
          name: 'Number'
        }
      },
      hasPreviousPage: {
        required: false,
        readOnly: true,
        serializedName: 'hasPreviousPage',
        type: {
          name: 'Boolean'
        }
      },
      hasNextPage: {
        required: false,
        readOnly: true,
        serializedName: 'hasNextPage',
        type: {
          name: 'Boolean'
        }
      },
      isFirstPage: {
        required: false,
        readOnly: true,
        serializedName: 'isFirstPage',
        type: {
          name: 'Boolean'
        }
      },
      isLastPage: {
        required: false,
        readOnly: true,
        serializedName: 'isLastPage',
        type: {
          name: 'Boolean'
        }
      },
      firstItemOnPage: {
        required: false,
        readOnly: true,
        serializedName: 'firstItemOnPage',
        type: {
          name: 'Number'
        }
      },
      lastItemOnPage: {
        required: false,
        readOnly: true,
        serializedName: 'lastItemOnPage',
        type: {
          name: 'Number'
        }
      }
    }
  }
};

export const PagedListResponseDataTask = {
  required: false,
  serializedName: 'PagedListResponse[DataTask]',
  type: {
    name: 'Composite',
    className: 'PagedListResponseDataTask',
    modelProperties: {
      metadata: {
        required: false,
        serializedName: 'metadata',
        type: {
          name: 'Composite',
          className: 'IPagedList'
        }
      },
      entities: {
        required: false,
        serializedName: 'entities',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'DataTaskElementType',
              type: {
                name: 'Composite',
                className: 'DataTask'
              }
          }
        }
      }
    }
  }
};

export const ContainFilterDataTaskGroup = {
  required: false,
  serializedName: 'ContainFilter[DataTaskGroup]',
  type: {
    name: 'Composite',
    className: 'ContainFilterDataTaskGroup',
    modelProperties: {
      values: {
        required: false,
        serializedName: 'values',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'stringElementType',
              type: {
                name: 'String'
              }
          }
        }
      }
    }
  }
};

export const ExistsFilterDataTaskGroup = {
  required: false,
  serializedName: 'ExistsFilter[DataTaskGroup]',
  type: {
    name: 'Composite',
    className: 'ExistsFilterDataTaskGroup',
    modelProperties: {
      values: {
        required: false,
        serializedName: 'values',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'stringElementType',
              type: {
                name: 'String'
              }
          }
        }
      }
    }
  }
};

export const IgnoredFilterDataTaskGroup = {
  required: false,
  serializedName: 'IgnoredFilter[DataTaskGroup]',
  type: {
    name: 'Composite',
    className: 'IgnoredFilterDataTaskGroup',
    modelProperties: {
      values: {
        required: false,
        serializedName: 'values',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'stringElementType',
              type: {
                name: 'String'
              }
          }
        }
      }
    }
  }
};

export const PeriodFilterDataTaskGroup = {
  required: false,
  serializedName: 'PeriodFilter[DataTaskGroup]',
  type: {
    name: 'Composite',
    className: 'PeriodFilterDataTaskGroup',
    modelProperties: {
      from: {
        required: false,
        serializedName: 'from',
        type: {
          name: 'DateTime'
        }
      },
      to: {
        required: false,
        serializedName: 'to',
        type: {
          name: 'DateTime'
        }
      }
    }
  }
};

export const FieldFilterDataTaskGroup = {
  required: false,
  serializedName: 'FieldFilter[DataTaskGroup]',
  type: {
    name: 'Composite',
    className: 'FieldFilterDataTaskGroup',
    modelProperties: {
      containValues: {
        required: false,
        serializedName: 'containValues',
        type: {
          name: 'Composite',
          className: 'ContainFilterDataTaskGroup'
        }
      },
      existsValues: {
        required: false,
        serializedName: 'existsValues',
        type: {
          name: 'Composite',
          className: 'ExistsFilterDataTaskGroup'
        }
      },
      fieldName: {
        required: false,
        serializedName: 'fieldName',
        type: {
          name: 'String'
        }
      },
      ignoredValues: {
        required: false,
        serializedName: 'ignoredValues',
        type: {
          name: 'Composite',
          className: 'IgnoredFilterDataTaskGroup'
        }
      },
      period: {
        required: false,
        serializedName: 'period',
        type: {
          name: 'Composite',
          className: 'PeriodFilterDataTaskGroup'
        }
      }
    }
  }
};

export const PagedListRequestDataTaskGroup = {
  required: false,
  serializedName: 'PagedListRequest[DataTaskGroup]',
  type: {
    name: 'Composite',
    className: 'PagedListRequestDataTaskGroup',
    modelProperties: {
      currentPage: {
        required: false,
        serializedName: 'currentPage',
        type: {
          name: 'Number'
        }
      },
      filters: {
        required: false,
        serializedName: 'filters',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'FieldFilterDataTaskGroupElementType',
              type: {
                name: 'Composite',
                className: 'FieldFilterDataTaskGroup'
              }
          }
        }
      },
      perPage: {
        required: false,
        serializedName: 'perPage',
        type: {
          name: 'Number'
        }
      },
      sortBy: {
        required: false,
        serializedName: 'sortBy',
        type: {
          name: 'String'
        }
      },
      sortDesc: {
        required: false,
        serializedName: 'sortDesc',
        type: {
          name: 'Boolean'
        }
      }
    }
  }
};

export const PagedListResponseDataTaskGroup = {
  required: false,
  serializedName: 'PagedListResponse[DataTaskGroup]',
  type: {
    name: 'Composite',
    className: 'PagedListResponseDataTaskGroup',
    modelProperties: {
      metadata: {
        required: false,
        serializedName: 'metadata',
        type: {
          name: 'Composite',
          className: 'IPagedList'
        }
      },
      entities: {
        required: false,
        serializedName: 'entities',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'DataTaskGroupElementType',
              type: {
                name: 'Composite',
                className: 'DataTaskGroup'
              }
          }
        }
      }
    }
  }
};

export const EntityStatusesValues = {
  required: false,
  serializedName: 'EntityStatusesValues',
  type: {
    name: 'Composite',
    className: 'EntityStatusesValues',
    modelProperties: {
      entityTypes: {
        required: false,
        serializedName: 'entityTypes',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'stringElementType',
              type: {
                name: 'String'
              }
          }
        }
      },
      sources: {
        required: false,
        serializedName: 'sources',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'stringElementType',
              type: {
                name: 'String'
              }
          }
        }
      },
      statuses: {
        required: false,
        serializedName: 'statuses',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'stringElementType',
              type: {
                name: 'String'
              }
          }
        }
      },
      statusMessages: {
        required: false,
        serializedName: 'statusMessages',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'stringElementType',
              type: {
                name: 'String'
              }
          }
        }
      },
      targets: {
        required: false,
        serializedName: 'targets',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'stringElementType',
              type: {
                name: 'String'
              }
          }
        }
      },
      versions: {
        required: false,
        serializedName: 'versions',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'stringElementType',
              type: {
                name: 'String'
              }
          }
        }
      }
    }
  }
};

export const ContainFilterEntityStatus = {
  required: false,
  serializedName: 'ContainFilter[EntityStatus]',
  type: {
    name: 'Composite',
    className: 'ContainFilterEntityStatus',
    modelProperties: {
      values: {
        required: false,
        serializedName: 'values',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'stringElementType',
              type: {
                name: 'String'
              }
          }
        }
      }
    }
  }
};

export const ExistsFilterEntityStatus = {
  required: false,
  serializedName: 'ExistsFilter[EntityStatus]',
  type: {
    name: 'Composite',
    className: 'ExistsFilterEntityStatus',
    modelProperties: {
      values: {
        required: false,
        serializedName: 'values',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'stringElementType',
              type: {
                name: 'String'
              }
          }
        }
      }
    }
  }
};

export const IgnoredFilterEntityStatus = {
  required: false,
  serializedName: 'IgnoredFilter[EntityStatus]',
  type: {
    name: 'Composite',
    className: 'IgnoredFilterEntityStatus',
    modelProperties: {
      values: {
        required: false,
        serializedName: 'values',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'stringElementType',
              type: {
                name: 'String'
              }
          }
        }
      }
    }
  }
};

export const PeriodFilterEntityStatus = {
  required: false,
  serializedName: 'PeriodFilter[EntityStatus]',
  type: {
    name: 'Composite',
    className: 'PeriodFilterEntityStatus',
    modelProperties: {
      from: {
        required: false,
        serializedName: 'from',
        type: {
          name: 'DateTime'
        }
      },
      to: {
        required: false,
        serializedName: 'to',
        type: {
          name: 'DateTime'
        }
      }
    }
  }
};

export const FieldFilterEntityStatus = {
  required: false,
  serializedName: 'FieldFilter[EntityStatus]',
  type: {
    name: 'Composite',
    className: 'FieldFilterEntityStatus',
    modelProperties: {
      containValues: {
        required: false,
        serializedName: 'containValues',
        type: {
          name: 'Composite',
          className: 'ContainFilterEntityStatus'
        }
      },
      existsValues: {
        required: false,
        serializedName: 'existsValues',
        type: {
          name: 'Composite',
          className: 'ExistsFilterEntityStatus'
        }
      },
      fieldName: {
        required: false,
        serializedName: 'fieldName',
        type: {
          name: 'String'
        }
      },
      ignoredValues: {
        required: false,
        serializedName: 'ignoredValues',
        type: {
          name: 'Composite',
          className: 'IgnoredFilterEntityStatus'
        }
      },
      period: {
        required: false,
        serializedName: 'period',
        type: {
          name: 'Composite',
          className: 'PeriodFilterEntityStatus'
        }
      }
    }
  }
};

export const PagedListRequestEntityStatus = {
  required: false,
  serializedName: 'PagedListRequest[EntityStatus]',
  type: {
    name: 'Composite',
    className: 'PagedListRequestEntityStatus',
    modelProperties: {
      currentPage: {
        required: false,
        serializedName: 'currentPage',
        type: {
          name: 'Number'
        }
      },
      filters: {
        required: false,
        serializedName: 'filters',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'FieldFilterEntityStatusElementType',
              type: {
                name: 'Composite',
                className: 'FieldFilterEntityStatus'
              }
          }
        }
      },
      perPage: {
        required: false,
        serializedName: 'perPage',
        type: {
          name: 'Number'
        }
      },
      sortBy: {
        required: false,
        serializedName: 'sortBy',
        type: {
          name: 'String'
        }
      },
      sortDesc: {
        required: false,
        serializedName: 'sortDesc',
        type: {
          name: 'Boolean'
        }
      }
    }
  }
};

export const DocumentTransfer = {
  required: false,
  serializedName: 'DocumentTransfer',
  type: {
    name: 'Composite',
    className: 'DocumentTransfer',
    modelProperties: {
      content: {
        required: false,
        serializedName: 'content',
        type: {
          name: 'String'
        }
      },
      documentTransferId: {
        required: false,
        serializedName: 'documentTransferId',
        type: {
          name: 'Number'
        }
      },
      documentType: {
        required: false,
        serializedName: 'documentType',
        type: {
          name: 'String'
        }
      },
      errorMessage: {
        required: false,
        serializedName: 'errorMessage',
        type: {
          name: 'String'
        }
      },
      source: {
        required: false,
        serializedName: 'source',
        type: {
          name: 'String'
        }
      },
      sourceId: {
        required: false,
        serializedName: 'sourceId',
        type: {
          name: 'String'
        }
      },
      status: {
        required: false,
        serializedName: 'status',
        type: {
          name: 'String'
        }
      },
      target: {
        required: false,
        serializedName: 'target',
        type: {
          name: 'String'
        }
      },
      targetId: {
        required: false,
        serializedName: 'targetId',
        type: {
          name: 'String'
        }
      },
      recCreated: {
        required: false,
        serializedName: 'recCreated',
        type: {
          name: 'DateTime'
        }
      },
      recModified: {
        required: false,
        serializedName: 'recModified',
        type: {
          name: 'DateTime'
        }
      },
      entityName: {
        required: false,
        readOnly: true,
        serializedName: 'entityName',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const EntityStatus = {
  required: false,
  serializedName: 'EntityStatus',
  type: {
    name: 'Composite',
    className: 'EntityStatus',
    modelProperties: {
      entityStatusId: {
        required: false,
        serializedName: 'entityStatusId',
        type: {
          name: 'Number'
        }
      },
      entityType: {
        required: false,
        serializedName: 'entityType',
        type: {
          name: 'String'
        }
      },
      entityVersion: {
        required: false,
        serializedName: 'entityVersion',
        type: {
          name: 'DateTime'
        }
      },
      inContent: {
        required: false,
        serializedName: 'inContent',
        type: {
          name: 'String'
        }
      },
      inDocTransfer: {
        required: false,
        serializedName: 'inDocTransfer',
        type: {
          name: 'Composite',
          className: 'DocumentTransfer'
        }
      },
      inDocTransferId: {
        required: false,
        serializedName: 'inDocTransferId',
        type: {
          name: 'Number'
        }
      },
      hasInContent: {
        required: false,
        serializedName: 'hasInContent',
        type: {
          name: 'Boolean'
        }
      },
      hasOutContent: {
        required: false,
        serializedName: 'hasOutContent',
        type: {
          name: 'Boolean'
        }
      },
      outContent: {
        required: false,
        serializedName: 'outContent',
        type: {
          name: 'String'
        }
      },
      outDocTransfer: {
        required: false,
        serializedName: 'outDocTransfer',
        type: {
          name: 'Composite',
          className: 'DocumentTransfer'
        }
      },
      outDocTransferId: {
        required: false,
        serializedName: 'outDocTransferId',
        type: {
          name: 'Number'
        }
      },
      source: {
        required: false,
        serializedName: 'source',
        type: {
          name: 'String'
        }
      },
      sourceId: {
        required: false,
        serializedName: 'sourceId',
        type: {
          name: 'String'
        }
      },
      status: {
        required: false,
        serializedName: 'status',
        type: {
          name: 'String'
        }
      },
      statusMessage: {
        required: false,
        serializedName: 'statusMessage',
        type: {
          name: 'String'
        }
      },
      target: {
        required: false,
        serializedName: 'target',
        type: {
          name: 'String'
        }
      },
      targetId: {
        required: false,
        serializedName: 'targetId',
        type: {
          name: 'String'
        }
      },
      recCreated: {
        required: false,
        serializedName: 'recCreated',
        type: {
          name: 'DateTime'
        }
      },
      recModified: {
        required: false,
        serializedName: 'recModified',
        type: {
          name: 'DateTime'
        }
      },
      entityName: {
        required: false,
        readOnly: true,
        serializedName: 'entityName',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const PagedListResponseEntityStatus = {
  required: false,
  serializedName: 'PagedListResponse[EntityStatus]',
  type: {
    name: 'Composite',
    className: 'PagedListResponseEntityStatus',
    modelProperties: {
      metadata: {
        required: false,
        serializedName: 'metadata',
        type: {
          name: 'Composite',
          className: 'IPagedList'
        }
      },
      entities: {
        required: false,
        serializedName: 'entities',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'EntityStatusElementType',
              type: {
                name: 'Composite',
                className: 'EntityStatus'
              }
          }
        }
      }
    }
  }
};

export const Stream = {
  required: false,
  serializedName: 'Stream',
  type: {
    name: 'Composite',
    className: 'Stream',
    modelProperties: {
      canRead: {
        required: false,
        readOnly: true,
        serializedName: 'canRead',
        type: {
          name: 'Boolean'
        }
      },
      canSeek: {
        required: false,
        readOnly: true,
        serializedName: 'canSeek',
        type: {
          name: 'Boolean'
        }
      },
      canTimeout: {
        required: false,
        readOnly: true,
        serializedName: 'canTimeout',
        type: {
          name: 'Boolean'
        }
      },
      canWrite: {
        required: false,
        readOnly: true,
        serializedName: 'canWrite',
        type: {
          name: 'Boolean'
        }
      },
      length: {
        required: false,
        readOnly: true,
        serializedName: 'length',
        type: {
          name: 'Number'
        }
      },
      position: {
        required: false,
        serializedName: 'position',
        type: {
          name: 'Number'
        }
      },
      readTimeout: {
        required: false,
        serializedName: 'readTimeout',
        type: {
          name: 'Number'
        }
      },
      writeTimeout: {
        required: false,
        serializedName: 'writeTimeout',
        type: {
          name: 'Number'
        }
      }
    }
  }
};

export const SettingDescription = {
  required: false,
  serializedName: 'SettingDescription',
  type: {
    name: 'Composite',
    className: 'SettingDescription',
    modelProperties: {
      name: {
        required: true,
        serializedName: 'name',
        type: {
          name: 'String'
        }
      },
      defaultValue: {
        required: false,
        serializedName: 'defaultValue',
        type: {
          name: 'String'
        }
      },
      type: {
        required: true,
        serializedName: 'type',
        type: {
          name: 'String'
        }
      },
      options: {
        required: false,
        serializedName: 'options',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'stringElementType',
              type: {
                name: 'String'
              }
          }
        }
      },
      isRequired: {
        required: false,
        serializedName: 'isRequired',
        type: {
          name: 'Boolean'
        }
      }
    }
  }
};

export const SafeWaitHandle = {
  required: false,
  serializedName: 'SafeWaitHandle',
  type: {
    name: 'Composite',
    className: 'SafeWaitHandle',
    modelProperties: {
      isInvalid: {
        required: false,
        readOnly: true,
        serializedName: 'isInvalid',
        type: {
          name: 'Boolean'
        }
      },
      isClosed: {
        required: false,
        readOnly: true,
        serializedName: 'isClosed',
        type: {
          name: 'Boolean'
        }
      }
    }
  }
};

export const WaitHandle = {
  required: false,
  serializedName: 'WaitHandle',
  type: {
    name: 'Composite',
    className: 'WaitHandle',
    modelProperties: {
      handle: {
        required: false,
        serializedName: 'handle',
        type: {
          name: 'Object'
        }
      },
      safeWaitHandle: {
        required: false,
        serializedName: 'safeWaitHandle',
        type: {
          name: 'Composite',
          className: 'SafeWaitHandle'
        }
      }
    }
  }
};

export const NullableCancellationToken = {
  required: false,
  serializedName: 'Nullable[CancellationToken]',
  type: {
    name: 'Composite',
    className: 'NullableCancellationToken',
    modelProperties: {
      isCancellationRequested: {
        required: false,
        readOnly: true,
        serializedName: 'isCancellationRequested',
        type: {
          name: 'Boolean'
        }
      },
      canBeCanceled: {
        required: false,
        readOnly: true,
        serializedName: 'canBeCanceled',
        type: {
          name: 'Boolean'
        }
      },
      waitHandle: {
        required: false,
        readOnly: true,
        serializedName: 'waitHandle',
        type: {
          name: 'Composite',
          className: 'WaitHandle'
        }
      }
    }
  }
};

export const IHandler = {
  required: false,
  serializedName: 'IHandler',
  type: {
    name: 'Composite',
    className: 'IHandler',
    modelProperties: {
      handlerSettings: {
        required: false,
        readOnly: true,
        serializedName: 'handlerSettings',
        type: {
          name: 'Object'
        }
      },
      defaultHandlerSettings: {
        required: false,
        readOnly: true,
        serializedName: 'defaultHandlerSettings',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'SettingDescriptionElementType',
              type: {
                name: 'Composite',
                className: 'SettingDescription'
              }
          }
        }
      },
      taskType: {
        required: false,
        readOnly: true,
        serializedName: 'taskType',
        type: {
          name: 'String'
        }
      },
      taskHandlerName: {
        required: false,
        readOnly: true,
        serializedName: 'taskHandlerName',
        type: {
          name: 'String'
        }
      },
      cancellationToken: {
        required: false,
        serializedName: 'cancellationToken',
        type: {
          name: 'Composite',
          className: 'NullableCancellationToken'
        }
      },
      logger: {
        required: false,
        readOnly: true,
        serializedName: 'logger',
        type: {
          name: 'Object'
        }
      }
    }
  }
};

export const Log = {
  required: false,
  serializedName: 'Log',
  type: {
    name: 'Composite',
    className: 'Log',
    modelProperties: {
      id: {
        required: false,
        serializedName: 'id',
        type: {
          name: 'Number'
        }
      },
      timestamp: {
        required: false,
        serializedName: 'timestamp',
        type: {
          name: 'DateTime'
        }
      },
      level: {
        required: false,
        readOnly: true,
        serializedName: 'level',
        type: {
          name: 'String'
        }
      },
      exception: {
        required: false,
        serializedName: 'exception',
        type: {
          name: 'String'
        }
      },
      renderedMessage: {
        required: false,
        serializedName: 'renderedMessage',
        type: {
          name: 'String'
        }
      },
      properties: {
        required: false,
        serializedName: 'properties',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const ContainFilterLog = {
  required: false,
  serializedName: 'ContainFilter[Log]',
  type: {
    name: 'Composite',
    className: 'ContainFilterLog',
    modelProperties: {
      values: {
        required: false,
        serializedName: 'values',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'stringElementType',
              type: {
                name: 'String'
              }
          }
        }
      }
    }
  }
};

export const ExistsFilterLog = {
  required: false,
  serializedName: 'ExistsFilter[Log]',
  type: {
    name: 'Composite',
    className: 'ExistsFilterLog',
    modelProperties: {
      values: {
        required: false,
        serializedName: 'values',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'stringElementType',
              type: {
                name: 'String'
              }
          }
        }
      }
    }
  }
};

export const IgnoredFilterLog = {
  required: false,
  serializedName: 'IgnoredFilter[Log]',
  type: {
    name: 'Composite',
    className: 'IgnoredFilterLog',
    modelProperties: {
      values: {
        required: false,
        serializedName: 'values',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'stringElementType',
              type: {
                name: 'String'
              }
          }
        }
      }
    }
  }
};

export const PeriodFilterLog = {
  required: false,
  serializedName: 'PeriodFilter[Log]',
  type: {
    name: 'Composite',
    className: 'PeriodFilterLog',
    modelProperties: {
      from: {
        required: false,
        serializedName: 'from',
        type: {
          name: 'DateTime'
        }
      },
      to: {
        required: false,
        serializedName: 'to',
        type: {
          name: 'DateTime'
        }
      }
    }
  }
};

export const FieldFilterLog = {
  required: false,
  serializedName: 'FieldFilter[Log]',
  type: {
    name: 'Composite',
    className: 'FieldFilterLog',
    modelProperties: {
      containValues: {
        required: false,
        serializedName: 'containValues',
        type: {
          name: 'Composite',
          className: 'ContainFilterLog'
        }
      },
      existsValues: {
        required: false,
        serializedName: 'existsValues',
        type: {
          name: 'Composite',
          className: 'ExistsFilterLog'
        }
      },
      fieldName: {
        required: false,
        serializedName: 'fieldName',
        type: {
          name: 'String'
        }
      },
      ignoredValues: {
        required: false,
        serializedName: 'ignoredValues',
        type: {
          name: 'Composite',
          className: 'IgnoredFilterLog'
        }
      },
      period: {
        required: false,
        serializedName: 'period',
        type: {
          name: 'Composite',
          className: 'PeriodFilterLog'
        }
      }
    }
  }
};

export const PagedListRequestLog = {
  required: false,
  serializedName: 'PagedListRequest[Log]',
  type: {
    name: 'Composite',
    className: 'PagedListRequestLog',
    modelProperties: {
      currentPage: {
        required: false,
        serializedName: 'currentPage',
        type: {
          name: 'Number'
        }
      },
      filters: {
        required: false,
        serializedName: 'filters',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'FieldFilterLogElementType',
              type: {
                name: 'Composite',
                className: 'FieldFilterLog'
              }
          }
        }
      },
      perPage: {
        required: false,
        serializedName: 'perPage',
        type: {
          name: 'Number'
        }
      },
      sortBy: {
        required: false,
        serializedName: 'sortBy',
        type: {
          name: 'String'
        }
      },
      sortDesc: {
        required: false,
        serializedName: 'sortDesc',
        type: {
          name: 'Boolean'
        }
      }
    }
  }
};

export const PagedListResponseLog = {
  required: false,
  serializedName: 'PagedListResponse[Log]',
  type: {
    name: 'Composite',
    className: 'PagedListResponseLog',
    modelProperties: {
      metadata: {
        required: false,
        serializedName: 'metadata',
        type: {
          name: 'Composite',
          className: 'IPagedList'
        }
      },
      entities: {
        required: false,
        serializedName: 'entities',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'LogElementType',
              type: {
                name: 'Composite',
                className: 'Log'
              }
          }
        }
      }
    }
  }
};

export const IDocumentTransfer = {
  required: false,
  serializedName: 'IDocumentTransfer',
  type: {
    name: 'Composite',
    className: 'IDocumentTransfer',
    modelProperties: {
      content: {
        required: false,
        serializedName: 'content',
        type: {
          name: 'String'
        }
      },
      documentTransferId: {
        required: false,
        serializedName: 'documentTransferId',
        type: {
          name: 'Number'
        }
      },
      documentType: {
        required: false,
        serializedName: 'documentType',
        type: {
          name: 'String'
        }
      },
      errorMessage: {
        required: false,
        serializedName: 'errorMessage',
        type: {
          name: 'String'
        }
      },
      source: {
        required: false,
        serializedName: 'source',
        type: {
          name: 'String'
        }
      },
      sourceId: {
        required: false,
        serializedName: 'sourceId',
        type: {
          name: 'String'
        }
      },
      status: {
        required: false,
        serializedName: 'status',
        type: {
          name: 'String'
        }
      },
      target: {
        required: false,
        serializedName: 'target',
        type: {
          name: 'String'
        }
      },
      targetId: {
        required: false,
        serializedName: 'targetId',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const IEntityStatus = {
  required: false,
  serializedName: 'IEntityStatus',
  type: {
    name: 'Composite',
    className: 'IEntityStatus',
    modelProperties: {
      entityStatusId: {
        required: false,
        readOnly: true,
        serializedName: 'entityStatusId',
        type: {
          name: 'Number'
        }
      },
      entityType: {
        required: false,
        readOnly: true,
        serializedName: 'entityType',
        type: {
          name: 'String'
        }
      },
      entityVersion: {
        required: false,
        readOnly: true,
        serializedName: 'entityVersion',
        type: {
          name: 'DateTime'
        }
      },
      inContent: {
        required: false,
        serializedName: 'inContent',
        type: {
          name: 'String'
        }
      },
      inDocTransfer: {
        required: false,
        readOnly: true,
        serializedName: 'inDocTransfer',
        type: {
          name: 'Composite',
          className: 'IDocumentTransfer'
        }
      },
      outContent: {
        required: false,
        serializedName: 'outContent',
        type: {
          name: 'String'
        }
      },
      outDocTransfer: {
        required: false,
        serializedName: 'outDocTransfer',
        type: {
          name: 'Composite',
          className: 'IDocumentTransfer'
        }
      },
      source: {
        required: false,
        serializedName: 'source',
        type: {
          name: 'String'
        }
      },
      sourceId: {
        required: false,
        serializedName: 'sourceId',
        type: {
          name: 'String'
        }
      },
      status: {
        required: false,
        readOnly: true,
        serializedName: 'status',
        type: {
          name: 'String'
        }
      },
      statusMessage: {
        required: false,
        serializedName: 'statusMessage',
        type: {
          name: 'String'
        }
      },
      target: {
        required: false,
        serializedName: 'target',
        type: {
          name: 'String'
        }
      },
      targetId: {
        required: false,
        serializedName: 'targetId',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const IntegratorAPIRestDataTaskGetPagedListPostOptionalParams = {
  required: false,
  serializedName: 'RestDataTaskGetPagedListPostOptions',
  type: {
    name: 'Composite',
    className: 'IntegratorAPIRestDataTaskGetPagedListPostOptionalParams',
    modelProperties: {
      pagedListRequest: {
        required: false,
        serializedName: 'pagedListRequest',
        type: {
          name: 'Composite',
          className: 'PagedListRequestDataTask'
        }
      }
    }
  }
};

export const IntegratorAPIRestDataTaskInsertPostOptionalParams = {
  required: false,
  serializedName: 'RestDataTaskInsertPostOptions',
  type: {
    name: 'Composite',
    className: 'IntegratorAPIRestDataTaskInsertPostOptionalParams',
    modelProperties: {
      entity: {
        required: false,
        serializedName: 'entity',
        type: {
          name: 'Composite',
          className: 'DataTask'
        }
      }
    }
  }
};

export const IntegratorAPIRestDataTaskInsertArrayPostOptionalParams = {
  required: false,
  serializedName: 'RestDataTaskInsertArrayPostOptions',
  type: {
    name: 'Composite',
    className: 'IntegratorAPIRestDataTaskInsertArrayPostOptionalParams',
    modelProperties: {
      entities: {
        required: false,
        serializedName: 'entities',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'DataTaskElementType',
              type: {
                name: 'Composite',
                className: 'DataTask'
              }
          }
        }
      }
    }
  }
};

export const IntegratorAPIRestDataTaskUpdatePutOptionalParams = {
  required: false,
  serializedName: 'RestDataTaskUpdatePutOptions',
  type: {
    name: 'Composite',
    className: 'IntegratorAPIRestDataTaskUpdatePutOptionalParams',
    modelProperties: {
      entity: {
        required: false,
        serializedName: 'entity',
        type: {
          name: 'Composite',
          className: 'DataTask'
        }
      }
    }
  }
};

export const IntegratorAPIRestDataTaskUpdateArrayPutOptionalParams = {
  required: false,
  serializedName: 'RestDataTaskUpdateArrayPutOptions',
  type: {
    name: 'Composite',
    className: 'IntegratorAPIRestDataTaskUpdateArrayPutOptionalParams',
    modelProperties: {
      entities: {
        required: false,
        serializedName: 'entities',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'DataTaskElementType',
              type: {
                name: 'Composite',
                className: 'DataTask'
              }
          }
        }
      }
    }
  }
};

export const IntegratorAPIRestDataTaskGroupGetPagedListPostOptionalParams = {
  required: false,
  serializedName: 'RestDataTaskGroupGetPagedListPostOptions',
  type: {
    name: 'Composite',
    className: 'IntegratorAPIRestDataTaskGroupGetPagedListPostOptionalParams',
    modelProperties: {
      pagedListRequest: {
        required: false,
        serializedName: 'pagedListRequest',
        type: {
          name: 'Composite',
          className: 'PagedListRequestDataTaskGroup'
        }
      }
    }
  }
};

export const IntegratorAPIRestDataTaskGroupInsertPostOptionalParams = {
  required: false,
  serializedName: 'RestDataTaskGroupInsertPostOptions',
  type: {
    name: 'Composite',
    className: 'IntegratorAPIRestDataTaskGroupInsertPostOptionalParams',
    modelProperties: {
      entity: {
        required: false,
        serializedName: 'entity',
        type: {
          name: 'Composite',
          className: 'DataTaskGroup'
        }
      }
    }
  }
};

export const IntegratorAPIRestDataTaskGroupInsertArrayPostOptionalParams = {
  required: false,
  serializedName: 'RestDataTaskGroupInsertArrayPostOptions',
  type: {
    name: 'Composite',
    className: 'IntegratorAPIRestDataTaskGroupInsertArrayPostOptionalParams',
    modelProperties: {
      entities: {
        required: false,
        serializedName: 'entities',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'DataTaskGroupElementType',
              type: {
                name: 'Composite',
                className: 'DataTaskGroup'
              }
          }
        }
      }
    }
  }
};

export const IntegratorAPIRestDataTaskGroupUpdatePutOptionalParams = {
  required: false,
  serializedName: 'RestDataTaskGroupUpdatePutOptions',
  type: {
    name: 'Composite',
    className: 'IntegratorAPIRestDataTaskGroupUpdatePutOptionalParams',
    modelProperties: {
      entity: {
        required: false,
        serializedName: 'entity',
        type: {
          name: 'Composite',
          className: 'DataTaskGroup'
        }
      }
    }
  }
};

export const IntegratorAPIRestDataTaskGroupUpdateArrayPutOptionalParams = {
  required: false,
  serializedName: 'RestDataTaskGroupUpdateArrayPutOptions',
  type: {
    name: 'Composite',
    className: 'IntegratorAPIRestDataTaskGroupUpdateArrayPutOptionalParams',
    modelProperties: {
      entities: {
        required: false,
        serializedName: 'entities',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'DataTaskGroupElementType',
              type: {
                name: 'Composite',
                className: 'DataTaskGroup'
              }
          }
        }
      }
    }
  }
};

export const IntegratorAPIRestEntityStatusGetEntityStatusShortPostOptionalParams = {
  required: false,
  serializedName: 'RestEntityStatusGetEntityStatusShortPostOptions',
  type: {
    name: 'Composite',
    className: 'IntegratorAPIRestEntityStatusGetEntityStatusShortPostOptionalParams',
    modelProperties: {
      pagedListRequest: {
        required: false,
        serializedName: 'pagedListRequest',
        type: {
          name: 'Composite',
          className: 'PagedListRequestEntityStatus'
        }
      }
    }
  }
};

export const IntegratorAPIRestEntityStatusGetPagedListPostOptionalParams = {
  required: false,
  serializedName: 'RestEntityStatusGetPagedListPostOptions',
  type: {
    name: 'Composite',
    className: 'IntegratorAPIRestEntityStatusGetPagedListPostOptionalParams',
    modelProperties: {
      pagedListRequest: {
        required: false,
        serializedName: 'pagedListRequest',
        type: {
          name: 'Composite',
          className: 'PagedListRequestEntityStatus'
        }
      }
    }
  }
};

export const IntegratorAPIRestEntityStatusInsertPostOptionalParams = {
  required: false,
  serializedName: 'RestEntityStatusInsertPostOptions',
  type: {
    name: 'Composite',
    className: 'IntegratorAPIRestEntityStatusInsertPostOptionalParams',
    modelProperties: {
      entity: {
        required: false,
        serializedName: 'entity',
        type: {
          name: 'Composite',
          className: 'EntityStatus'
        }
      }
    }
  }
};

export const IntegratorAPIRestEntityStatusInsertArrayPostOptionalParams = {
  required: false,
  serializedName: 'RestEntityStatusInsertArrayPostOptions',
  type: {
    name: 'Composite',
    className: 'IntegratorAPIRestEntityStatusInsertArrayPostOptionalParams',
    modelProperties: {
      entities: {
        required: false,
        serializedName: 'entities',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'EntityStatusElementType',
              type: {
                name: 'Composite',
                className: 'EntityStatus'
              }
          }
        }
      }
    }
  }
};

export const IntegratorAPIRestEntityStatusUpdatePutOptionalParams = {
  required: false,
  serializedName: 'RestEntityStatusUpdatePutOptions',
  type: {
    name: 'Composite',
    className: 'IntegratorAPIRestEntityStatusUpdatePutOptionalParams',
    modelProperties: {
      entity: {
        required: false,
        serializedName: 'entity',
        type: {
          name: 'Composite',
          className: 'EntityStatus'
        }
      }
    }
  }
};

export const IntegratorAPIRestEntityStatusUpdateArrayPutOptionalParams = {
  required: false,
  serializedName: 'RestEntityStatusUpdateArrayPutOptions',
  type: {
    name: 'Composite',
    className: 'IntegratorAPIRestEntityStatusUpdateArrayPutOptionalParams',
    modelProperties: {
      entities: {
        required: false,
        serializedName: 'entities',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'EntityStatusElementType',
              type: {
                name: 'Composite',
                className: 'EntityStatus'
              }
          }
        }
      }
    }
  }
};

export const IntegratorAPIRestSchedulerExecuteTaskByDataTaskIdPostOptionalParams = {
  required: false,
  serializedName: 'RestSchedulerExecuteTaskByDataTaskIdPostOptions',
  type: {
    name: 'Composite',
    className: 'IntegratorAPIRestSchedulerExecuteTaskByDataTaskIdPostOptionalParams',
    modelProperties: {
      dataTaskParameters: {
        required: false,
        serializedName: 'dataTaskParameters',
        type: {
          name: 'Dictionary',
          value: {
              required: false,
              serializedName: 'stringElementType',
              type: {
                name: 'String'
              }
          }
        }
      }
    }
  }
};

export const IntegratorAPIRestSchedulerGetLogsPagedListPostOptionalParams = {
  required: false,
  serializedName: 'RestSchedulerGetLogsPagedListPostOptions',
  type: {
    name: 'Composite',
    className: 'IntegratorAPIRestSchedulerGetLogsPagedListPostOptionalParams',
    modelProperties: {
      pagedListRequest: {
        required: false,
        serializedName: 'pagedListRequest',
        type: {
          name: 'Composite',
          className: 'PagedListRequestLog'
        }
      }
    }
  }
};

export const IntegratorAPIRestSchedulerResendEntityPostOptionalParams = {
  required: false,
  serializedName: 'RestSchedulerResendEntityPostOptions',
  type: {
    name: 'Composite',
    className: 'IntegratorAPIRestSchedulerResendEntityPostOptionalParams',
    modelProperties: {
      entityStatus: {
        required: false,
        serializedName: 'entityStatus',
        type: {
          name: 'Composite',
          className: 'EntityStatus'
        }
      }
    }
  }
};
